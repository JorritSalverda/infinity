// Code generated by MockGen. DO NOT EDIT.
// Source: manifest_reader.go

// Package lib is a generated GoMock package.
package lib

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManifestReader is a mock of ManifestReader interface.
type MockManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockManifestReaderMockRecorder
}

// MockManifestReaderMockRecorder is the mock recorder for MockManifestReader.
type MockManifestReaderMockRecorder struct {
	mock *MockManifestReader
}

// NewMockManifestReader creates a new mock instance.
func NewMockManifestReader(ctrl *gomock.Controller) *MockManifestReader {
	mock := &MockManifestReader{ctrl: ctrl}
	mock.recorder = &MockManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestReader) EXPECT() *MockManifestReaderMockRecorder {
	return m.recorder
}

// GetManifest mocks base method.
func (m *MockManifestReader) GetManifest(ctx context.Context, buildManifestFilename string) (Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", ctx, buildManifestFilename)
	ret0, _ := ret[0].(Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockManifestReaderMockRecorder) GetManifest(ctx, buildManifestFilename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockManifestReader)(nil).GetManifest), ctx, buildManifestFilename)
}
